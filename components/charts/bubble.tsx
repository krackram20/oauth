
import {
  Chart as ChartJS,
  LinearScale,
  PointElement,
  Tooltip,
  Legend,
} from 'chart.js';
import { Bubble } from 'react-chartjs-2';
import {faker} from '@faker-js/faker';
import { useState } from 'react';

ChartJS.register(LinearScale, PointElement, Tooltip, Legend);

export const options = {
  scales: {
    y: {
      beginAtZero: true,
    },
  },
};

const sample = [
    {
        x: 0.9818760622795348,
        y: 0.38773910603277517,
        r: 6
    },
    {
        x: 0.5995033049876104,
        y: 0.7459636882513536,
        r: 46
    },
    {
        x: 0.16359549863110845,
        y: 0.2946488087080863,
        r: 4
    },
    {
        x: 0.3332983586737367,
        y: 0.8624549477081528,
        r: 33
    },
    {
        x: 0.5019470275768478,
        y: 0.9292623020086658,
        r: 24
    },
    {
        x: 0.12916326501411712,
        y: 0.23896029555986054,
        r: 5
    },
    {
        x: 0.41321552470023115,
        y: 0.3904239211444619,
        r: 11
    },
    {
        x: 0.7142923081445578,
        y: 0.6463056878203033,
        r: 24
    },
    {
        x: 0.7337649679207038,
        y: 0.6272440619891164,
        r: 22
    },
    {
        x: 0.19210321838884914,
        y: 0.20164540996725933,
        r: 14
    },
    {
        x: 0.7608664738088816,
        y: 0.13500984332886612,
        r: 40
    },
    {
        x: 0.10508831164422017,
        y: 0.06955225741477433,
        r: 4
    },
    {
        x: 0.6163778815189151,
        y: 0.8199764288121802,
        r: 40
    },
    {
        x: 0.4904882459950498,
        y: 0.3246014556274648,
        r: 20
    },
    {
        x: 0.826249922556486,
        y: 0.08791409468019717,
        r: 11
    },
    {
        x: 0.207408261671993,
        y: 0.7164129706781163,
        r: 38
    },
    {
        x: 0.1381711686112339,
        y: 0.32847699699754496,
        r: 17
    },
    {
        x: 0.49793036438698945,
        y: 0.3929712579747673,
        r: 8
    },
    {
        x: 0.28179718214297234,
        y: 0.05248507526687718,
        r: 47
    },
    {
        x: 0.6284758142002874,
        y: 0.23176437890951507,
        r: 35
    },
    {
        x: 0.44003839267735256,
        y: 0.21179794226492232,
        r: 33
    },
    {
        x: 0.09680592682455758,
        y: 0.8721667934408955,
        r: 45
    },
    {
        x: 0.4905350367874265,
        y: 0.17695891186755852,
        r: 34
    },
    {
        x: 0.4809042849584515,
        y: 0.2984442981211467,
        r: 26
    },
    {
        x: 0.7040752922054344,
        y: 0.4671752131835796,
        r: 27
    },
    {
        x: 0.6354724913527687,
        y: 0.4933269433363374,
        r: 31
    },
    {
        x: 0.17729306167793057,
        y: 0.3870808035590666,
        r: 32
    },
    {
        x: 0.8374363071511112,
        y: 0.26043734955180775,
        r: 45
    },
    {
        x: 0.2221149739951862,
        y: 0.007324186445750391,
        r: 25
    },
    {
        x: 0.2618620090098599,
        y: 0.433769895282451,
        r: 23
    },
    {
        x: 0.6413392696691288,
        y: 0.4791886091521793,
        r: 18
    },
    {
        x: 0.0928116793258329,
        y: 0.8783020700727472,
        r: 45
    },
    {
        x: 0.961273156974042,
        y: 0.06066427974511224,
        r: 36
    },
    {
        x: 0.7893392217281543,
        y: 0.6027244993147692,
        r: 50
    },
    {
        x: 0.4570082819927028,
        y: 0.7817483481932888,
        r: 46
    },
    {
        x: 0.8250793470675856,
        y: 0.00886162145865066,
        r: 13
    },
    {
        x: 0.14777460949181964,
        y: 0.7349811514536292,
        r: 8
    },
    {
        x: 0.2813799943714872,
        y: 0.4889140622048401,
        r: 15
    },
    {
        x: 0.8286119827916681,
        y: 0.15368274958915118,
        r: 19
    },
    {
        x: 0.3199580891441036,
        y: 0.8380954822795611,
        r: 25
    },
    {
        x: 0.8756827465110906,
        y: 0.8610124906268612,
        r: 30
    },
    {
        x: 0.0035370691964177192,
        y: 0.004105156621524553,
        r: 38
    },
    {
        x: 0.766899501750525,
        y: 0.22943527521605644,
        r: 37
    },
    {
        x: 0.5243897524764061,
        y: 0.664332490270737,
        r: 32
    },
    {
        x: 0.5137563784341727,
        y: 0.38966942152727335,
        r: 34
    },
    {
        x: 0.3843256243369465,
        y: 0.765523016571709,
        r: 27
    },
    {
        x: 0.03656015157460302,
        y: 0.2435639003007174,
        r: 33
    },
    {
        x: 0.8292178769904156,
        y: 0.12826052289263878,
        r: 39
    },
    {
        x: 0.7315092062765234,
        y: 0.5550821062846276,
        r: 16
    },
    {
        x: 0.15107479224088283,
        y: 0.3000742702469714,
        r: 22
    }
]

export type axis = {
    x: number,
    y: number,
    r: number
}

export const data = {
  datasets: [
    {
      label: 'Red dataset',
      data: sample,
      backgroundColor: 'rgba(255, 99, 132, 0.5)',
    },
    {
      label: 'Blue dataset',
      data: 
        [{x: 0.1, y: 0.2, r: 3}]
      ,
      backgroundColor: 'rgba(53, 162, 235, 0.5)',
    },
  ],
};

const BubbleChart = (variables, columns) => {

    let rows = variables.variables


    function unQuoteKeys(obj, newObj ={}){
        Object.keys(obj).forEach(key => {
              newObj[key] = obj[key]
        });
        return newObj
    }

    const sample = []

    if( rows?.rows) {

        for (let i = 0; i < rows?.rows.length; i++) {
            
            sample.push({ x: rows?.rows[i][0], y: rows?.rows[i][1], r: rows?.rows[i][2]})
        }
    }
    const sample2 = sample.map(obj => { obj => { return unQuoteKeys(obj)}})

    console.log(columns, 'cols', variables)
    
    const [bubbles, setBubbles] = useState([])

 
    

    const data = {
        datasets: [
          {
            label: 'Red dataset',
            data: bubbles,
            backgroundColor: 'rgba(255, 99, 132, 0.5)',
          }
        ],
      };


  return( 
  
  <div>
    <button onClick ={()=> { setBubbles(sample); console.log(bubbles)}}> Get chart</button>
    { bubbles.length > 0 && <Bubble options={options} data={data} />}
  </div>
  );
}

export default BubbleChart